/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type FileStruct = {
  _name: string;
  _fileType: string;
  _ipfsHash: string;
  _key: string;
  _sharedBy: AddressLike;
};

export type FileStructOutput = [
  _name: string,
  _fileType: string,
  _ipfsHash: string,
  _key: string,
  _sharedBy: string
] & {
  _name: string;
  _fileType: string;
  _ipfsHash: string;
  _key: string;
  _sharedBy: string;
};

export interface IVaultInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addSharedFile"
      | "createFile"
      | "deleteFile"
      | "getAllFiles"
      | "getCreator"
      | "getOwner"
      | "getUser"
      | "migrateFiles"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addSharedFile",
    values: [string, string, string, string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createFile",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "deleteFile", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getAllFiles",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCreator",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(functionFragment: "getUser", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "migrateFiles",
    values: [BytesLike, BigNumberish, BytesLike, BytesLike, FileStruct[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "addSharedFile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createFile", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deleteFile", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllFiles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getCreator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getUser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "migrateFiles",
    data: BytesLike
  ): Result;
}

export interface IVault extends BaseContract {
  connect(runner?: ContractRunner | null): IVault;
  waitForDeployment(): Promise<this>;

  interface: IVaultInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addSharedFile: TypedContractMethod<
    [
      name: string,
      fileType: string,
      ipfsHash: string,
      key: string,
      sharedBy: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  createFile: TypedContractMethod<
    [name: string, fileType: string, ipfsHash: string, key: string],
    [void],
    "nonpayable"
  >;

  deleteFile: TypedContractMethod<[ipfsHash: string], [void], "nonpayable">;

  getAllFiles: TypedContractMethod<[], [FileStructOutput[]], "view">;

  getCreator: TypedContractMethod<[], [string], "view">;

  getOwner: TypedContractMethod<[], [string], "view">;

  getUser: TypedContractMethod<[], [string], "view">;

  migrateFiles: TypedContractMethod<
    [
      _hashedMessage: BytesLike,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      _files: FileStruct[]
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addSharedFile"
  ): TypedContractMethod<
    [
      name: string,
      fileType: string,
      ipfsHash: string,
      key: string,
      sharedBy: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createFile"
  ): TypedContractMethod<
    [name: string, fileType: string, ipfsHash: string, key: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deleteFile"
  ): TypedContractMethod<[ipfsHash: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAllFiles"
  ): TypedContractMethod<[], [FileStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getCreator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getUser"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "migrateFiles"
  ): TypedContractMethod<
    [
      _hashedMessage: BytesLike,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      _files: FileStruct[]
    ],
    [void],
    "nonpayable"
  >;

  filters: {};
}
