/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type FileStruct = {
  _name: string;
  _fileType: string;
  _ipfsHash: string;
  _key: string;
  _sharedBy: AddressLike;
};

export type FileStructOutput = [
  _name: string,
  _fileType: string,
  _ipfsHash: string,
  _key: string,
  _sharedBy: string
] & {
  _name: string;
  _fileType: string;
  _ipfsHash: string;
  _key: string;
  _sharedBy: string;
};

export type ShareRequestStruct = {
  _from: AddressLike;
  _fileHash: string;
  _keyHash: string;
  _name: string;
  _fileType: string;
};

export type ShareRequestStructOutput = [
  _from: string,
  _fileHash: string,
  _keyHash: string,
  _name: string,
  _fileType: string
] & {
  _from: string;
  _fileHash: string;
  _keyHash: string;
  _name: string;
  _fileType: string;
};

export interface PeerSafeDeployerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptShareRequest"
      | "adminAllVaults"
      | "createFile"
      | "deleteFile"
      | "deploy"
      | "getAllFiles"
      | "getCreator"
      | "getOwner"
      | "getPubKey"
      | "getShareRequests"
      | "getVault"
      | "rejectShareRequest"
      | "sendShareRequest"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptShareRequest",
    values: [BytesLike, BigNumberish, BytesLike, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "adminAllVaults",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createFile",
    values: [
      string,
      string,
      string,
      string,
      BytesLike,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteFile",
    values: [BytesLike, BigNumberish, BytesLike, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deploy",
    values: [string, BytesLike, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllFiles",
    values: [BytesLike, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreator",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPubKey",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getShareRequests",
    values: [BytesLike, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVault",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rejectShareRequest",
    values: [BytesLike, BigNumberish, BytesLike, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "sendShareRequest",
    values: [
      BytesLike,
      BigNumberish,
      BytesLike,
      BytesLike,
      AddressLike,
      string,
      string,
      string,
      string
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptShareRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminAllVaults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createFile", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deleteFile", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deploy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllFiles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getCreator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPubKey", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getShareRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rejectShareRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendShareRequest",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PeerSafeDeployer extends BaseContract {
  connect(runner?: ContractRunner | null): PeerSafeDeployer;
  waitForDeployment(): Promise<this>;

  interface: PeerSafeDeployerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptShareRequest: TypedContractMethod<
    [
      _hashedMessage: BytesLike,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      _fileHash: string
    ],
    [void],
    "nonpayable"
  >;

  adminAllVaults: TypedContractMethod<[], [[string[], string[]]], "view">;

  createFile: TypedContractMethod<
    [
      name: string,
      fileType: string,
      ipfsHash: string,
      key: string,
      _hashedMessage: BytesLike,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  deleteFile: TypedContractMethod<
    [
      _hashedMessage: BytesLike,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      ipfsHash: string
    ],
    [void],
    "nonpayable"
  >;

  deploy: TypedContractMethod<
    [
      _userName: string,
      _hashedMessage: BytesLike,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  getAllFiles: TypedContractMethod<
    [_hashedMessage: BytesLike, _v: BigNumberish, _r: BytesLike, _s: BytesLike],
    [FileStructOutput[]],
    "view"
  >;

  getCreator: TypedContractMethod<[], [string], "view">;

  getOwner: TypedContractMethod<[], [string], "view">;

  getPubKey: TypedContractMethod<[_user: AddressLike], [string], "view">;

  getShareRequests: TypedContractMethod<
    [_hashedMessage: BytesLike, _v: BigNumberish, _r: BytesLike, _s: BytesLike],
    [ShareRequestStructOutput[]],
    "view"
  >;

  getVault: TypedContractMethod<[_vaultOwner: AddressLike], [string], "view">;

  rejectShareRequest: TypedContractMethod<
    [
      _hashedMessage: BytesLike,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      _fileHash: string
    ],
    [void],
    "nonpayable"
  >;

  sendShareRequest: TypedContractMethod<
    [
      _hashedMessage: BytesLike,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      _to: AddressLike,
      _fileHash: string,
      _keyHash: string,
      _name: string,
      _fileType: string
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptShareRequest"
  ): TypedContractMethod<
    [
      _hashedMessage: BytesLike,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      _fileHash: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "adminAllVaults"
  ): TypedContractMethod<[], [[string[], string[]]], "view">;
  getFunction(
    nameOrSignature: "createFile"
  ): TypedContractMethod<
    [
      name: string,
      fileType: string,
      ipfsHash: string,
      key: string,
      _hashedMessage: BytesLike,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deleteFile"
  ): TypedContractMethod<
    [
      _hashedMessage: BytesLike,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      ipfsHash: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deploy"
  ): TypedContractMethod<
    [
      _userName: string,
      _hashedMessage: BytesLike,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAllFiles"
  ): TypedContractMethod<
    [_hashedMessage: BytesLike, _v: BigNumberish, _r: BytesLike, _s: BytesLike],
    [FileStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCreator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getPubKey"
  ): TypedContractMethod<[_user: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getShareRequests"
  ): TypedContractMethod<
    [_hashedMessage: BytesLike, _v: BigNumberish, _r: BytesLike, _s: BytesLike],
    [ShareRequestStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVault"
  ): TypedContractMethod<[_vaultOwner: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "rejectShareRequest"
  ): TypedContractMethod<
    [
      _hashedMessage: BytesLike,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      _fileHash: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sendShareRequest"
  ): TypedContractMethod<
    [
      _hashedMessage: BytesLike,
      _v: BigNumberish,
      _r: BytesLike,
      _s: BytesLike,
      _to: AddressLike,
      _fileHash: string,
      _keyHash: string,
      _name: string,
      _fileType: string
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
